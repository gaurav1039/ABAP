*&---------------------------------------------------------------------*
*& Report ZALV_IDA
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zalv_ida.

DATA : lv_kunnr TYPE kunnr,
       lv_erdat TYPE erdat.

DATA: lr_vkorg TYPE RANGE OF vkorg.

PARAMETERS: p_vkorg TYPE vkorg.
SELECT-OPTIONS: s_erdat FOR lv_erdat,
                s_kunnr FOR lv_kunnr.


*******************
*& Event Handling
*&  - Step#1: Define Event Handler Class/Method
*&  - Step#2: Implement Event Handler Class/Method
*&  - Step#3: Enable Double Click for SALV Grid
*&  - Step#4: Set Event Handler Method
*******************

CLASS lcl_handle_action DEFINITION.
  PUBLIC SECTION.
    METHODS:
      constructor IMPORTING io_ida TYPE REF TO if_salv_gui_table_ida,
      handle_dbclick FOR EVENT double_click OF if_salv_gui_table_display_opt,
      handle_action FOR EVENT function_selected OF if_salv_gui_toolbar_ida.
    DATA: o_ida TYPE REF TO if_salv_gui_table_ida.

ENDCLASS.

CLASS lcl_handle_action IMPLEMENTATION.
  METHOD constructor.
    o_ida = io_ida.
  ENDMETHOD.
  METHOD handle_dbclick.
    DATA: ls_vbak         TYPE vbak,
          r_vbeln         TYPE RANGE OF vbeln,
          lt_named_ranges TYPE if_salv_service_types=>yt_named_ranges.

    IF o_ida IS BOUND.
      IF o_ida->selection( )->is_row_selected( ).
        "get selected row
        o_ida->selection( )->get_selected_row( IMPORTING es_row = ls_vbak ).
        DATA(o_ida_item) = cl_salv_gui_table_ida=>create( iv_table_name = 'VBAP' ).
        IF o_ida_item IS BOUND.
          INSERT VALUE #( name = 'VBELN'
                          sign = 'I'
                          option = 'EQ'
                          low = ls_vbak-vbeln ) INTO TABLE lt_named_ranges.
          o_ida_item->set_select_options( it_ranges = lt_named_ranges ).
          o_ida_item->fullscreen( )->display( ).
        ENDIF.
      ELSE.
        MESSAGE 'No row selected' TYPE 'I'.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD handle_action.
    DATA: ls_vbak         TYPE vbak,
          lr_vbeln        TYPE RANGE OF vbeln,
          lt_named_ranges TYPE if_salv_service_types=>yt_named_ranges.
    IF o_ida IS BOUND.
      IF o_ida->selection( )->is_row_selected( ).
        "get selected row
        o_ida->selection( )->get_selected_row( IMPORTING es_row = ls_vbak ).
        DATA(o_ida_item) = cl_salv_gui_table_ida=>create( iv_table_name = 'VBAP' ).
        IF o_ida_item IS BOUND.
          INSERT VALUE #( name = 'VBELN'
                          sign = 'I'
                          option = 'EQ'
                          low = ls_vbak-vbeln ) INTO TABLE lt_named_ranges.
          o_ida_item->set_select_options( it_ranges = lt_named_ranges ).
          o_ida_item->fullscreen( )->display( ).
        ENDIF.
      ELSE.
        MESSAGE 'No row selected' TYPE 'I'.
      ENDIF.
    ENDIF.
  ENDMETHOD.

ENDCLASS.

CLASS lcl_calc_fields DEFINITION.
  PUBLIC SECTION.
    INTERFACES if_salv_ida_calc_field_handler.
    TYPES: BEGIN OF ty_custom_fields,
             taxamount TYPE netwr,
             netamount TYPE netwr,
           END OF ty_custom_fields.

ENDCLASS.

CLASS lcl_calc_fields IMPLEMENTATION.
  METHOD if_salv_ida_calc_field_handler~get_calc_field_structure.
    ro_calc_field_structure ?= cl_abap_typedescr=>describe_by_name( 'TY_CUSTOM_FIELDS' ).
  ENDMETHOD.

  METHOD if_salv_ida_calc_field_handler~get_requested_fields.
    "Specify source field for calculating the custom field.
    rts_db_field_name = VALUE #( ( CONV string('NETWR') ) ). "Tax amount
    rts_db_field_name = VALUE #( ( CONV string('NETWR') ) ).  "Net Amount
  ENDMETHOD.

  METHOD if_salv_ida_calc_field_handler~calculate_line.
    "calculate values
    DATA: ls_vbak        TYPE vbak,
          ls_calc_fields TYPE ty_custom_fields.

    ls_vbak = is_data_base_line.
    ls_calc_fields-taxamount =  ls_vbak-netwr * '0.10'.
    ls_calc_fields-netamount =  ls_vbak-netwr - ls_calc_fields-taxamount.
    es_calculated_fields = ls_calc_fields.
  ENDMETHOD.
  METHOD if_salv_ida_calc_field_handler~start_page.

  ENDMETHOD.
  METHOD if_salv_ida_calc_field_handler~end_page.

  ENDMETHOD.


ENDCLASS.




START-OF-SELECTION.
  "* **********************

*CHECK db capabilities
  CHECK cl_salv_gui_table_ida=>db_capabilities( )->is_table_supported( iv_ddic_table_name = 'VBAK').

*CREATE ida
  DATA(o_ida) = cl_salv_gui_table_ida=>create( iv_table_name = 'VBAK' ).

*SET MAXIMUM rows recommended
  IF cl_salv_gui_table_ida=>db_capabilities( )->is_max_rows_recommended( ).

    o_ida->set_maximum_number_of_rows(  iv_number_of_rows = 2000 ).

  ENDIF.

*******************
*& Applying Filters
*******************

  "set select options
  INSERT VALUE #( sign = 'I'
                  option = 'EQ'
                  low = p_vkorg )
                  INTO TABLE lr_vkorg.

  "Range table collector
  DATA(o_sel) = NEW cl_salv_range_tab_collector( ).
  o_sel->add_ranges_for_name(
    EXPORTING
      iv_name   = 'VKORG'
      it_ranges = lr_vkorg[]
  ).
  o_sel->add_ranges_for_name(
    EXPORTING
      iv_name   = 'ERDAT'
      it_ranges = s_erdat[]
  ).
  o_sel->add_ranges_for_name(
    EXPORTING
      iv_name   = 'KUNNR'
      it_ranges = s_kunnr[]
  ).

  "get name and ranges
  o_sel->get_collected_ranges(
    IMPORTING
      et_named_ranges = DATA(lt_named_ranges)
  ).

  "set selected ranges to ALV

  TRY.
      o_ida->set_select_options(
        EXPORTING
          it_ranges                     = lt_named_ranges
*    io_condition                  =
      ).
    CATCH cx_salv_ida_associate_invalid.    "
    CATCH cx_salv_db_connection.    "
    CATCH cx_salv_ida_condition_invalid.    "
    CATCH cx_salv_ida_unknown_name.    "
  ENDTRY.

*******************
*& ALV Dispay Setting
*******************

  "***Restrict  list of fields to be displayed

  DATA: lt_field_names TYPE if_salv_gui_types_ida=>yts_field_name.

  lt_field_names = VALUE #(
          ( CONV string('ERDAT') )
          ( CONV string('KUNNR') )
          ( CONV string('NETWR') )
          ( CONV string('SPART') )
          ( CONV string('VBELN') )
          ( CONV string('VKORG') )
          ( CONV string('VTWEG') )
          ( CONV string('WAERK') ) ).

  o_ida->field_catalog( )->set_available_fields( EXPORTING its_field_names = lt_field_names ).


  "***Set Sort order

  DATA lt_sort_order TYPE if_salv_gui_types_ida=>yt_sort_rule.

  INSERT VALUE #( field_name = 'KUNNR'
                  descending = abap_true
                  is_grouped = abap_true )
                  INTO TABLE lt_sort_order.
  INSERT VALUE #( field_name = 'WAERK'
                  descending = abap_true
                  is_grouped = abap_true )
                  INTO TABLE lt_sort_order.

  TRY.
      o_ida->default_layout( )->set_sort_order( it_sort_order = lt_sort_order ).
    CATCH cx_salv_ida_unknown_name.    "
    CATCH cx_salv_ida_duplicate_name.    "
  ENDTRY.

*******************
*& Display Options
*******************

  "***Set Currency and Quantity Reference Field
  TRY.
      o_ida->field_catalog( )->set_currency_reference_field(
        EXPORTING
          iv_amount_field_name           = 'NETWR'
          iv_currency_field_name         = 'WAERK'
      ).
    CATCH cx_salv_ida_contract_violation.    "
    CATCH cx_salv_call_after_1st_display.    "
  ENDTRY.




  "***Enable Double Click and Set Selection Mode

  o_ida->display_options( )->enable_double_click( ).

  o_ida->selection( )->set_selection_mode( EXPORTING iv_mode = 'SINGLE' ).

  "***Instantiate Event Handler Class and Set Handler

  DATA(o_handler) = NEW lcl_handle_action( io_ida = o_ida ).
  SET HANDLER o_handler->handle_dbclick FOR o_ida->display_options( ).


*******************
*& Toolbar Buttons
*&  - Step#1: Define Event Handler Class/Method
*&  - Step#2: Implement Event Handler Class/Method
*&  - Step#3: Add button to the Toolbar
*&  - Step#4: Enable Selection mode for SALV Grid
*&  - Step#4: Set Event Handler Method
*******************
  "Add Button on to the Toolbar
  o_ida->toolbar( )->add_button( EXPORTING iv_fcode = 'DISP' iv_text = 'Display' ).
  SET HANDLER o_handler->handle_action FOR o_ida->toolbar( ).


*******************
*&  Calculation Fields
*&  We can also display calculated fields apart from the Standard database table fields using calculation fields
*&  Implement Calculation field Handler ---- Interface: IF_SALV_IDA_CALC_FIELD_HANDLER
*&  Step#1: Define Structure with custom fields.
*&  In our case we have two calculation fields namely TAXAMOUNT and NETAMOUNT
*&  Step#2: Implement method to get calculation field structure
*&  Register Structure type to the SALV IDA Grid
*&  Step#3: Implement method to get requested fields
*&  What are the database fields needed to calculate the custom calculation fields
*&  Step#4: Implement method to calculate Line
*******************


o_ida = cl_salv_gui_table_ida=>create(
                  iv_table_name                  = 'VBAK'
*                  io_gui_container               =
                  io_calc_field_handler          = new lcl_calc_fields( )
              ).












*******************
*& Display
*******************

*display
o_ida->fullscreen( )->display( ).
